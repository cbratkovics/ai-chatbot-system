version: '3.8'

x-app-environment: &app-environment
  APP_ENV: demo
  LOG_LEVEL: INFO

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: demo-postgres
    environment:
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo123
      POSTGRES_DB: chatbot_demo
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-network

  # Cache
  redis:
    image: redis:7-alpine
    container_name: demo-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.demo
    container_name: demo-backend
    ports:
      - "8000:8000"
    environment:
      <<: *app-environment
      DATABASE_URL: postgresql://demo:demo123@postgres:5432/chatbot_demo
      REDIS_URL: redis://redis:6379/0
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app  # Hot reload for development
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - demo-network

  # Frontend UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.demo
    container_name: demo-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    depends_on:
      - backend
    networks:
      - demo-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: demo-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.demo.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - demo-network
    profiles:
      - with-nginx

networks:
  demo-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local