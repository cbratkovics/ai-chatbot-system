version: '3.8'

x-common-variables: &common-variables
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  REDIS_URL: redis://redis:6379
  DATABASE_URL: postgresql://${DB_USER:-chatbot}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-chatbot_db}

x-backend-base: &backend-base
  build:
    context: ../../backend
    dockerfile: ../infrastructure/docker/Dockerfile.backend
  environment:
    <<: *common-variables
    OPENAI_API_KEY: ${OPENAI_API_KEY}
    ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
    JAEGER_AGENT_HOST: jaeger
    JAEGER_AGENT_PORT: 6831
  depends_on:
    - redis
    - postgres
  restart: unless-stopped
  networks:
    - chatbot-network

services:
  # ===========================================
  # Core Services
  # ===========================================
  backend:
    <<: *backend-base
    container_name: chatbot-backend
    ports:
      - "8000:8000"
    volumes:
      - ../../backend/app:/app/app  # Development hot-reload
    profiles: ["default", "dev", "prod"]

  frontend:
    build:
      context: ../../frontend
      dockerfile: ../infrastructure/docker/Dockerfile.frontend
    container_name: chatbot-frontend
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://backend:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - chatbot-network
    profiles: ["default", "dev", "prod"]

  # ===========================================
  # Data Services
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - chatbot-network
    profiles: ["default", "dev", "prod", "test"]

  postgres:
    image: postgres:15-alpine
    container_name: chatbot-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-chatbot}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-chatbot_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - chatbot-network
    profiles: ["default", "dev", "prod"]

  # ===========================================
  # Monitoring & Observability (dev/prod profiles)
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: chatbot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - chatbot-network
    profiles: ["monitoring", "prod"]

  grafana:
    image: grafana/grafana:latest
    container_name: chatbot-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - ../../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - chatbot-network
    profiles: ["monitoring", "prod"]

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: chatbot-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    restart: unless-stopped
    networks:
      - chatbot-network
    profiles: ["tracing", "prod"]

  # ===========================================
  # Testing Services (test profile)
  # ===========================================
  test-backend:
    <<: *backend-base
    container_name: chatbot-test-backend
    command: pytest /app/tests -v --cov=/app --cov-report=html
    volumes:
      - ../../backend:/app
      - test_coverage:/app/htmlcov
    profiles: ["test"]

  locust:
    build:
      context: ../../backend
      dockerfile: ../infrastructure/docker/Dockerfile.backend
    container_name: chatbot-locust
    ports:
      - "8089:8089"
    command: locust -f /app/tests/load/locustfile.py --host=http://backend:8000
    volumes:
      - ../../backend/tests/load:/app/tests/load
    depends_on:
      - backend
    networks:
      - chatbot-network
    profiles: ["load-test"]

  # ===========================================
  # Development Tools (dev profile)
  # ===========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chatbot-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    depends_on:
      - postgres
    networks:
      - chatbot-network
    profiles: ["dev"]

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: chatbot-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - chatbot-network
    profiles: ["dev"]

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  test_coverage:

networks:
  chatbot-network:
    driver: bridge