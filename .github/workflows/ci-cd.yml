name: Main Branch CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Single job for build, test, and push
  build-test-push:
    name: Build, Test & Push
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write  # Required for pushing to ghcr.io
      id-token: write  # For OIDC if needed
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Cache Docker layers
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Simple metadata
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      # Get current date for build timestamp
      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      # Build and push in one step
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/docker/dockerfiles/Dockerfile.multistage
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.date.outputs.date }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] || github.ref_name }}
            PYTHONPATH=/app
      
      # Basic security scan
      - name: Run Trivy security scan
        if: github.event_name == 'push' && success()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build
        continue-on-error: true
      
      - name: Upload Trivy scan results
        if: github.event_name == 'push' && success()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Always succeed
      - name: Pipeline Status
        if: always()
        run: |
          echo "âœ… Pipeline completed!"
          echo "Build result: ${{ steps.build.outcome }}"
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
  
  # Simple deployment job
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-test-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build-test-push.result == 'success'
    
    permissions:
      contents: read
      deployments: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        continue-on-error: true
      
      # Create GitHub deployment
      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deploying to production via CI/CD pipeline',
              auto_merge: false,
              required_contexts: []
            });
            
            console.log('Deployment created:', deployment.data.id);
            return deployment.data.id;
        continue-on-error: true
      
      # Update deployment status to in_progress
      - name: Update deployment status (in_progress)
        if: steps.deployment.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment is in progress',
              environment_url: 'https://your-app-url.com' // Update this with your actual URL
            });
        continue-on-error: true
      
      # Placeholder for actual deployment
      - name: Deploy application
        id: deploy
        run: |
          echo "ðŸš€ Deployment stage reached!"
          echo "Build status: ${{ needs.build-test-push.result }}"
          echo "Ready for deployment when configured"
          # Add actual deployment commands here:
          # - kubectl apply
          # - helm upgrade
          # - terraform apply
          # etc.
        continue-on-error: true
      
      # Update deployment status to success or failure
      - name: Update deployment status (final)
        if: always() && steps.deployment.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ steps.deploy.outcome }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success' 
              ? 'Deployment completed successfully' 
              : 'Deployment failed';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: state,
              description: description,
              environment_url: 'https://your-app-url.com' // Update this with your actual URL
            });
        continue-on-error: true