name: CI/CD Pipeline with Poetry

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1'  # Weekly dependency updates
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Dependency Security Check
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Check for poetry.lock
        id: check-lock
        run: |
          if [ -f "poetry.lock" ]; then
            echo "lock_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lock_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No poetry.lock file found, will generate one"
          fi
      
      - name: Generate lock file if missing
        if: steps.check-lock.outputs.lock_exists == 'false'
        run: poetry lock --no-update
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Security scan with pip-audit
        continue-on-error: true
        run: |
          poetry run pip install pip-audit
          poetry run pip-audit --format json > security-report.json || echo '{"vulnerabilities": []}' > security-report.json
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_id }}
          path: security-report.json
          retention-days: 30

  # Lint and Type Check
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Check for poetry.lock
        id: check-lock
        run: |
          if [ -f "poetry.lock" ]; then
            echo "lock_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lock_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate lock file if missing
        if: steps.check-lock.outputs.lock_exists == 'false'
        run: poetry lock --no-update
      
      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run black
        run: poetry run black --check app/ api/ tests/ || true
        continue-on-error: true
      
      - name: Run ruff
        run: poetry run ruff check app/ api/ tests/ || true
        continue-on-error: true
      
      - name: Run mypy
        run: poetry run mypy app/ api/ || true
        continue-on-error: true

  # Test Matrix
  test:
    name: Test ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']
        include:
          - os: ubuntu-latest
            ml-variant: ml-cpu
          - os: macos-latest
            ml-variant: ml-cpu
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Check for poetry.lock
        id: check-lock
        run: |
          if [ -f "poetry.lock" ]; then
            echo "lock_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lock_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate lock file if missing
        if: steps.check-lock.outputs.lock_exists == 'false'
        run: poetry lock --no-update
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-
            poetry-${{ runner.os }}-
      
      - name: Install dependencies
        run: |
          poetry install --no-interaction --with dev
          # Install ML variant if specified
          if [ "${{ matrix.ml-variant }}" != "" ]; then
            poetry install --no-interaction --with ${{ matrix.ml-variant }} || echo "ML variant not available"
          fi
      
      - name: Run tests
        run: |
          poetry run pytest tests/ \
            --cov=app --cov=api \
            --cov-report=xml \
            --cov-report=term-missing \
            -v || echo "Tests not found or failed"
      
      - name: Upload coverage
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build Docker images
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: always() && (needs.quality.result == 'success' || needs.test.result == 'success')
    strategy:
      matrix:
        target: [production, ml-cpu, edge]
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.target }}
            type=ref,event=pr,suffix=-${{ matrix.target }}
            type=sha,prefix={{branch}}-,suffix=-${{ matrix.target }}
            type=raw,value=${{ matrix.target }},enable={{is_default_branch}}
      
      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ -f "config/docker/dockerfiles/Dockerfile.poetry" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Dockerfile.poetry not found"
          fi
      
      - name: Build and push Docker image
        if: steps.check-dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: config/docker/dockerfiles/Dockerfile.poetry
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.target }}
          cache-to: type=gha,mode=max,scope=${{ matrix.target }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  # Dependency Updates (Weekly)
  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Update dependencies
        run: |
          poetry update --no-interaction
          poetry lock --no-interaction
      
      - name: Export requirements
        run: |
          if [ -f "./scripts/compatibility_bridge.sh" ]; then
            ./scripts/compatibility_bridge.sh
          else
            echo "compatibility_bridge.sh not found, skipping"
          fi
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'chore: weekly dependency updates'
          body: |
            ## Weekly Dependency Updates
            
            This PR contains the weekly dependency updates generated by Poetry.
            
            ### Changes
            - Updated poetry.lock with latest compatible versions
            - Regenerated requirements.txt files for compatibility
            
            ### Security
            Security scan results are available in the workflow artifacts.
            
            Please review and merge if all tests pass.
          branch: deps/weekly-update
          delete-branch: true

  # Performance Benchmark
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for performance tests
        id: check-perf
        run: |
          if [ -d "tests/performance" ]; then
            echo "perf_tests_exist=true" >> $GITHUB_OUTPUT
          else
            echo "perf_tests_exist=false" >> $GITHUB_OUTPUT
            echo "Performance tests directory not found"
          fi
      
      - name: Run performance benchmarks
        if: steps.check-perf.outputs.perf_tests_exist == 'true'
        continue-on-error: true
        run: |
          docker run --rm \
            -v $PWD/tests:/tests \
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:production \
            poetry run python -m pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark.json || echo "Benchmarks failed or not available"
      
      - name: Store benchmark result
        if: steps.check-perf.outputs.perf_tests_exist == 'true' && success()
        uses: benchmark-action/github-action-benchmark@v1
        continue-on-error: true
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Generate SBOM
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Check for poetry.lock
        id: check-lock
        run: |
          if [ -f "poetry.lock" ]; then
            echo "lock_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lock_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate lock file if missing
        if: steps.check-lock.outputs.lock_exists == 'false'
        run: poetry lock --no-update
      
      - name: Install dependencies
        run: poetry install --only main || pip install toml click
      
      - name: Generate SBOM
        run: |
          if [ -f "scripts/dependency_manager.py" ]; then
            poetry run python scripts/dependency_manager.py generate-sbom || echo '{"error": "SBOM generation failed"}' > sbom.json
          else
            echo '{"error": "dependency_manager.py not found"}' > sbom.json
          fi
      
      - name: Upload SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.run_id }}
          path: sbom.json
          retention-days: 30