# FinOps Cost Management Platform - Docker Compose Configuration
# Complete infrastructure for enterprise cost management and optimization

version: '3.8'

services:
  # FinOps Core Platform
  finops-platform:
    build:
      context: .
      dockerfile: Dockerfile.finops
    container_name: finops-platform
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - AWS_DEFAULT_REGION=us-east-1
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://finops:finops123@postgres:5432/finops
      - PROMETHEUS_GATEWAY=http://prometheus:9090
    ports:
      - "8080:8080"
    volumes:
      - ./finops:/app/finops
      - ./config:/app/config
      - finops-data:/app/data
    depends_on:
      - postgres
      - redis
      - prometheus
    networks:
      - finops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # FinOps Scheduler
  finops-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.finops
    container_name: finops-scheduler
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - AWS_DEFAULT_REGION=us-east-1
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://finops:finops123@postgres:5432/finops
    volumes:
      - ./finops:/app/finops
      - ./config:/app/config
      - finops-logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - finops-network
    command: ["python", "/app/finops/automation/finops_scheduler.py", "/app/config/finops-config.yaml"]

  # FinOps Dashboard
  finops-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: finops-dashboard
    restart: unless-stopped
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://finops:finops123@postgres:5432/finops
    ports:
      - "8501:8501"
    volumes:
      - ./finops/dashboard:/app/dashboard
      - finops-data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - finops-network
    command: ["streamlit", "run", "/app/dashboard/finops_dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finops-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: finops
      POSTGRES_USER: finops
      POSTGRES_PASSWORD: finops123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./finops/sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./finops/sql/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
      - ./finops/sql/seed.sql:/docker-entrypoint-initdb.d/03-seed.sql
    networks:
      - finops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finops"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: finops-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./finops/config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - finops-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: finops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./finops/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - finops-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: finops-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=finops123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./finops/config/grafana/provisioning:/etc/grafana/provisioning
      - ./finops/config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - finops-network
    depends_on:
      - prometheus

  # ClickHouse for Analytics (Alternative to traditional OLAP)
  clickhouse:
    image: clickhouse/clickhouse-server:23.3
    container_name: finops-clickhouse
    restart: unless-stopped
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: finops
      CLICKHOUSE_USER: finops
      CLICKHOUSE_PASSWORD: finops123
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./finops/sql/clickhouse-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - finops-network
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # Apache Airflow for Advanced Workflow Management
  airflow-webserver:
    image: apache/airflow:2.7.0-python3.11
    container_name: finops-airflow-webserver
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://finops:finops123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=81HqDtbqAywKSOumSHA3BhWNOdQ26slT6K0YaZeZyPs=
      - AIRFLOW__WEBSERVER__SECRET_KEY=finops_secret_key
    ports:
      - "8081:8080"
    volumes:
      - ./finops/airflow/dags:/opt/airflow/dags
      - ./finops/airflow/logs:/opt/airflow/logs
      - ./finops/airflow/plugins:/opt/airflow/plugins
      - airflow-data:/opt/airflow
    depends_on:
      - postgres
    networks:
      - finops-network
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.7.0-python3.11
    container_name: finops-airflow-scheduler
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://finops:finops123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=81HqDtbqAywKSOumSHA3BhWNOdQ26slT6K0YaZeZyPs=
    volumes:
      - ./finops/airflow/dags:/opt/airflow/dags
      - ./finops/airflow/logs:/opt/airflow/logs
      - ./finops/airflow/plugins:/opt/airflow/plugins
      - airflow-data:/opt/airflow
    depends_on:
      - postgres
    networks:
      - finops-network
    command: scheduler

  # Jupyter Notebook for Analysis
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: finops-jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=finops123
    volumes:
      - ./finops/notebooks:/home/jovyan/work
      - jupyter-data:/home/jovyan
    networks:
      - finops-network

  # Metabase for Business Intelligence
  metabase:
    image: metabase/metabase:v0.47.0
    container_name: finops-metabase
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=finops
      - MB_DB_PASS=finops123
      - MB_DB_HOST=postgres
    volumes:
      - metabase-data:/metabase-data
    depends_on:
      - postgres
    networks:
      - finops-network

  # MinIO for Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: finops-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=finops
      - MINIO_ROOT_PASSWORD=finops123
    volumes:
      - minio-data:/data
    networks:
      - finops-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: finops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./finops/config/nginx.conf:/etc/nginx/nginx.conf
      - ./finops/config/ssl:/etc/nginx/ssl
    depends_on:
      - finops-platform
      - finops-dashboard
      - grafana
    networks:
      - finops-network

  # Vector for Log Aggregation
  vector:
    image: timberio/vector:0.33.0-alpine
    container_name: finops-vector
    restart: unless-stopped
    volumes:
      - ./finops/config/vector.toml:/etc/vector/vector.toml
      - finops-logs:/var/log/finops
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - finops-network
    depends_on:
      - clickhouse

  # Cost Anomaly Detection Service
  anomaly-detector:
    build:
      context: .
      dockerfile: Dockerfile.anomaly
    container_name: finops-anomaly-detector
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://finops:finops123@postgres:5432/finops
      - MODEL_PATH=/app/models
    volumes:
      - ./finops/ml_models:/app/models
      - anomaly-logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - finops-network

  # Cost Forecasting Service
  cost-forecaster:
    build:
      context: .
      dockerfile: Dockerfile.forecaster
    container_name: finops-cost-forecaster
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://finops:finops123@postgres:5432/finops
    volumes:
      - ./finops/forecasting:/app/forecasting
      - forecasting-data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - finops-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  clickhouse-data:
    driver: local
  airflow-data:
    driver: local
  jupyter-data:
    driver: local
  metabase-data:
    driver: local
  minio-data:
    driver: local
  finops-data:
    driver: local
  finops-logs:
    driver: local
  anomaly-logs:
    driver: local
  forecasting-data:
    driver: local

networks:
  finops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16